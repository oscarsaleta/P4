#
# This file was automatically generated by MPLSTRIP.
# Source file: infinity.tex
# Time stamp on source file: Tue Oct 24 14:36:22 2017
#
restart;
read( "realroot.m" );
read( "tools.m" );
read( "weakfocus.m" );
read( "writelog.m" );
read( "type.m" );

vec_field_diff_chart := proc( f, x, y )
    local d, f_U1, f_V1, f_U2, f_V2, lin, sing, sdegree;

    d := max( ddeg(f[1],x,y), ddeg(f[2],x,y));
    f_U1 := optimizevf( [ z2^d*(-z1*subs({x=1/z2,y=z1/z2},f[1])+subs({x=1/z2,y=z1/z2},f[2])),
       -z2^(d+1)*subs({x=1/z2,y=z1/z2},f[1])], z1, z2 );
    f_V1:= optimizevf( [ z2^d*(z1*subs({x=-1/z2,y=z1/z2},f[1])+subs({x=-1/z2,y=z1/z2},f[2])),
       z2^(d+1)*subs({x=-1/z2,y=z1/z2},f[1])], z1, z2 );
    f_U2:= optimizevf( [ z2^d*(subs({x=z1/z2,y=1/z2},f[1])-z1*subs({x=z1/z2,y=1/z2},f[2])),
           -z2^(d+1)*subs({x=z1/z2,y=1/z2},f[2])], z1, z2 );
    f_V2:= optimizevf( [z2^d*(subs({x=z1/z2,y=-1/z2},f[1])+z1*subs({x=z1/z2,y=-1/z2},f[2])),
           z2^(d+1)*subs({x=z1/z2,y=-1/z2},f[2])], z1, z2 );

    if not member( all_crit_points, {1,3} ) then
        writef( "We make use of the Poincare disc.\n" );
        openfile( result_file );
        writef( "We make a study on the Poincare disc.\n\n" );
        openfile( terminal );
    fi;

    lin := [ optimizepolynomial1( subs(z2=0,f_U1[1]), z1 ),
             optimizepolynomial1( subs(z2=0,f_U1[2]), z1 ) ];
    if lin[1]=0 and lin[2]=0 then
        if not member( all_crit_points, {1,3} ) then
            writef( "Infinity is a line of singularities.\n" );
            openfile( result_file );
            writef( "Infinity is a line of singularities.\n" );
            openfile( terminal );
        fi;  # One can prove: line is never degenerated: divide by z2^1 suffices to desingularize
        f_U1 := optimizevf( [ f_U1[1]/z2, f_U1[2]/z2 ], z1, z2 );
        f_U2 := optimizevf( [ f_U2[1]/z2, f_U2[2]/z2 ], z1, z2 );
        f_V1 := optimizevf( [ f_V1[1]/z2, f_V1[2]/z2 ], z1, z2 );
        f_V2 := optimizevf( [ f_V2[1]/z2, f_V2[2]/z2 ], z1, z2 );
        sing := 1;
    else sing := 0;
    fi;
    show_charts( [f_U1, f_V1, f_U2, f_V2], [ "U1", "V1", "U2", "V2" ] );
    openfile( vec_table );
    write_vec_field( subs( z1=x, z2=y, f_U1 ) );
    write_vec_field( subs( z1=x, z2=y, f_V1 ) );
    write_vec_field( subs( z1=x, z2=y, f_U2 ) );
    write_vec_field( subs( z1=x, z2=y, f_V2 ) );
    writef( "%d\n", sing );
    if type(d-1,even) then  sdegree := 0; writef( "1\n" );
    else sdegree := 1; writef( "-1\n" ); fi;
    openfile( terminal );

    if not member( all_crit_points, { 1, 3 } ) then
        if sing = 0 then
            find_inf_roots( d, f, f_U1, f_U2, x, y, sdegree )
        else
            find_inf_roots_sing( f_U1, f_U2 );
        fi;
    else
        writef( "Singularities at infinity are not determined.\n" );
    fi;
end:

show_charts := proc( flst, namelst )
    local f, k;
    for k from 1 to nops(flst) do
        writef( "The differential system on the %s chart:\n", namelst[k] );
        f := eval(flst[k]);
        writef( "    z1' = %a\n    z2' = %a\n\n", f[1], f[2] );
    od;
end:
# behaviour_inf: first calculate point-compactification vf at infinity:  x = u/(u^2+v^2), y=v/(u^2+v^2),
#                 and consider {u=v=0} after desingularization by power of (u^2+v^2).
#                 Then proceed as in the weak_focus procedure to study the singularity (0,0) locally.

behaviour_inf := proc(f, d)
    local p1, q1, _x, _y, g, jac, delta, rho, sigma, aa10, aa01, bb10, s, zz, zzb, L1, L2, lyp;

    p1 := subs( {x = _x/(_x^2+_y^2),y = _y/(_x^2+_y^2)}, f[1] );
    q1 := subs( {x = _x/(_x^2+_y^2),y = _y/(_x^2+_y^2)}, f[2] );
    g := [ (_x^2+_y^2)^d * ( (_x^2+_y^2)*p1 - 2*_x*(_x*p1+_y*q1) ),
           (_x^2+_y^2)^d * ( (_x^2+_y^2)*q1 - 2*_y*(_x*p1+_y*q1) ) ];
    g := norpoly2( g, _x,_y );
    g := optimizevf( subs( {_x=x,_y=y}, g ), x, y );

    jac := jacobian( g, x=0, y=0 );
    delta := jac[1]*jac[4] - jac[2]*jac[3];
    rho := jac[1]+jac[4];
    sigma := rho^2 - 4*delta;

    if reduce_llt( sigma, 0 ) then
        if reduce_eeq( rho, 0 ) then
            # weak focus, continuing in rounded mode
            aa10 := evalf( coeff( coeff( g[1], y, 0 ), x, 1 ) );
            aa01 := evalf( coeff( coeff( g[1], x, 0 ), y, 1 ) );
            bb10 := evalf( coeff( coeff( g[2], y, 0 ), x, 1 ) );
            s := evalf( sqrt( -aa01*bb10 - aa10^2 ));

            g := [ bb10 * subs( {x=-s*_x/bb10+aa10*_y/bb10}, g[1] )/s^2 -
                   aa10 * subs( {x=-s*_x/bb10+aa10*_y/bb10}, g[2] )/s^2,
                   subs( { x=-s*_x/bb10+aa10*y/bb10}, g[2] ) / s ];
                        ###### PROBABLY AN ERROR !!!! g[2] was f[2] in Herc code

            g := evalf( subs( {_x=x, _y=y}, g ) );
            g := subs( { x = (zz+zzb)/2, y=-I*(zz-zzb)/2 }, g[1] ) +
                 I * subs( { x = (zz+zzb)/2, y=-I*(zz-zzb)/2 }, g[2] );
            g := evalf( expand( g ) );
            g := g / evalf( coeff( coeff( coeff(g, zzb, 0), zz, 1 ), I, 1 ) );

            lyp := lyapunov( gg - I*zz, zz, zzb );

            if lyp[1] <> 0 then
                writef( "The order of weakness is %d.\n", lyp[2] );
                writef( "The lyapunov constant is %g.\n", -lyp[1] );
                openfile( result_file );
                writef( "The order of weakness is %d.\n", lyp[2] );
                writef( "The lyapunov constant is %g.\n", -lyp[1] );
                openfile( terminal );
                if lyp[1] < 0 then
                     writef( "The equator is weakly repelling.\n" );
                     openfile( result_file );
                     writef( "The equator is weakly repelling.\n" );
                     openfile( terminal );
                else
                     writef( "The equator is weakly attracting.\n" );
                     openfile( result_file );
                     writef( "The equator is weakly attracting.\n" );
                     openfile( terminal );
                fi;
            else
                if lyp[3] = 2 or lyp[4]=1 then
                     writef( "We have a center behaviour at infinity.\n" );
                     openfile( result_file );
                     writef( "We have a center behaviour at infinity.\n" );
                     openfile( terminal );
                else
                     writef( "The order of weakness at infinity is at least %d.\n", weakness_level+1 );
                     openfile( result_file );
                     writef( "The order of weakness at infinity is at least %d.\n", weakness_level+1 );
                     openfile( terminal );
                fi;
            fi;
            openfile( result_file );
            writef( "##########################################\n" );
            openfile( terminal );
            writef( "##########################################\n" );
        else
            # strong focus
            L1 := evalf( (rho - sqrt(sigma))/2 );
            L2 := evalf( (rho + sqrt(sigma))/2 );
            if reduce_gt( rho, 0 ) then
                writef( "The equator is repelling.\n" );
                openfile( result_file );
                writef( "The equator is repelling.\n" );
                openfile( terminal );
            else
                writef( "The equator is attracting.\n" );
                openfile( result_file );
                writef( "The equator is attracting.\n" );
                openfile( terminal );
            fi;
        fi;
    fi;
end:
pl_chart := proc( f )
    local j, c, d, p, q, g, h, f_U1, f_V1, f_U2, f_V2, f_C, ge, gn, t1, t2, t3; global user_p, user_q, rounded;
    p := user_p; q := user_q;
    if all_crit_points <> 1 and all_crit_points <> 3 then
        openfile( result_file, terminal );
        writef( "We make the study on the Poincare-Lyapunov disc of degree (%d,%d).\n", p, q );
        openfile( terminal );
    fi;

    c := quasihom_degree( f, x, y, p, q );
    g := z2^q * subs({x=d/z2^p,y=z1/z2^q},f[2])-d*q/p*z2^p*z1*subs({x=d/z2^p,y=z1/z2^q},f[1]);
    h := -d/p * z2^(p+1)*subs( {x=d/z2^p,y=z1/z2^q}, f[1] );
    f_U1 := optimizevf( subs(d=1,  [ g * z2^c, h * z2^c ] ), z1,z2 );
    f_V1 := optimizevf( subs(d=-1, [ g * z2^c, h * z2^c ] ), z1,z2 );

    g := z2^p * subs({x=z1/z2^p,y=d/z2^q},f[1]) - d*p/q*z2^q*z1*subs( { x=z1/z2^p,y=d/z2^q}, f[2] );
    h := -d/q * z2^(q+1)*subs( {x=z1/z2^p,y=d/z2^q}, f[2]);
    f_U2 := optimizevf( subs(d=1,  [ g*z2^c, h*z2^c]), z1, z2 );
    f_V2 := optimizevf( subs(d=-1, [ g*z2^c, h*z2^c]), z1, z2 );

    g := -r^(p+1)*_co*subs( { x=_co/r^p,y=_si/r^q },f[1])-r^(q+1)*_si*subs( {x=_co/r^p,y=_si/r^q},f[2]);
    h := -q*r^p*_si*subs( {x=_co/r^p,y=_si/r^q},f[1])+p*r^q*_co*subs( {x=_co/r^p,y=_si/r^q},f[2]);
    f_C := [norpoly3(g*r^c,r,_co,_si), norpoly3(h*r^c,r,_co,_si) ];

    openfile( vec_table );
    write_vec_field( subs( {z1=x,z2=y}, f_U1 ) );
    write_vec_field( subs( {z1=x,z2=y}, f_V1 ) );
    write_vec_field( subs( {z1=x,z2=y}, f_U2 ) );
    write_vec_field( subs( {z1=x,z2=y}, f_V2 ) );
    write_vec_field_cylinder( f_C );
    openfile( terminal );

    if all_crit_points <> 1 and all_crit_points <> 3 then
        # find roots of U1

        g := find_real_roots1( subs( z2=0, f_U1[1]), z1 );
        ge := g[1]; gn := g[2];
        openfile( log_file );
        writef( "%d\n", nops(ge)+nops(gn) );
        openfile( terminal );
        writef( "The differential system on the U1 chart:\n" );
        openfile( result_file );
        writef( "First we study the system on the U1 chart (x=1/z2^%d,y=z1/z2^%d).\n", p, q );
        openfile( result_file, terminal );
        writef( "    z1' = %a\n    z2' = %a\n", f_U1[1], f_U1[2] );
        openfile( terminal );
        for j from 1 to nops(ge) do
            t1 := eval( diff(f_U1[1],z1),{z1=ge[j],z2=0} );
            t2 := eval( diff(f_U1[1],z2),{z1=ge[j],z2=0} );
            t3 := eval( diff(f_U1[2],z2),{z1=ge[j],z2=0} );
            type_inf( f_U1, 1, ge[j], t1, t2, t3, 0 );
        od;
        rounded := true;
        for j from 1 to nops(gn) do
            t1 := evalf(eval( diff(f_U1[1],z1),{z1=gn[j],z2=0} ));
            t2 := evalf(eval( diff(f_U1[1],z2),{z1=gn[j],z2=0} ));
            t3 := evalf(eval( diff(f_U1[2],z2),{z1=gn[j],z2=0} ));
            type_inf( f_U1, 1, gn[j], t1, t2, t3, 0 );
        od;
        rounded := user_numeric;

        # find roots of V1

        g := find_real_roots1( subs( z2=0, f_V1[1]), z1 );
        ge := g[1]; gn := g[2];
        openfile( log_file );
        writef( "%d\n", nops(ge)+nops(gn) );
        openfile( terminal );
        writef( "The differential system on the V1 chart:\n" );
        openfile( result_file );
        writef( "Now we study the system on the V1 chart (x=-1/z2^%d,y=z1/z2^%d).\n", p, q );
        openfile( result_file, terminal );
        writef( "    z1' = %a\n    z2' = %a\n", f_V1[1], f_V1[2] );
        openfile( terminal );
        for j from 1 to nops(ge) do
            t1 := eval( diff(f_V1[1],z1),{z1=ge[j],z2=0} );
            t2 := eval( diff(f_V1[1],z2),{z1=ge[j],z2=0} );
            t3 := eval( diff(f_V1[2],z2),{z1=ge[j],z2=0} );
            type_inf( f_V1, 3, ge[j], t1, t2, t3, 0 );
        od;
        rounded := true;
        for j from 1 to nops(gn) do
            t1 := eval( diff(f_V1[1],z1),{z1=gn[j],z2=0} );
            t2 := eval( diff(f_V1[1],z2),{z1=gn[j],z2=0} );
            t3 := eval( diff(f_V1[2],z2),{z1=gn[j],z2=0} );
            type_inf( f_V1, 3, gn[j], t1, t2, t3, 0 );
        od;
        rounded := user_numeric;

        # is (0,0) a singularity of U2 ?

        if reduce_eeq( subs( { z1=0,z2=0 }, f_U2[1]), 0 ) and reduce_eeq( subs( {z1=0,z2=0}, f_U2[2]),0 ) then
            openfile( log_file );
            writef( "1\n" );
            openfile( terminal );
            writef( "The differential system on the U2 chart:\n" );
            openfile( result_file );
            writef( "Now we study the system on the U2 chart (x=z1/z2^%d,y=1/z2^%d).\n", p, q );
            openfile( result_file, terminal );
            writef( "    z1' = %a\n    z2' = %a\n", f_U2[1], f_U2[2] );
            openfile( terminal );
            t1 := eval( diff(f_U2[1],z1),{z1=0,z2=0} );
            t2 := eval( diff(f_U2[1],z2),{z1=0,z2=0} );
            t3 := eval( diff(f_U2[2],z2),{z1=0,z2=0} );
            type_inf( f_U2, 2, 0, t1, t2, t3, 0 );
        else
            openfile( log_file );
            writef( "0\n" );
            openfile( terminal );
            writef( "In the U2 chart, no extra singularity is found.\n" );
        fi;

        # is (0,0) a singularity of V2 ?
        if reduce_eeq( subs( { z1=0,z2=0 }, f_V2[1]), 0 ) and reduce_eeq( subs( {z1=0,z2=0}, f_V2[2]),0 ) then
            openfile( log_file );
            writef( "1\n" );
            openfile( terminal );
            writef( "The differential system on the V2 chart:\n" );
            openfile( result_file );
            writef( "Now we study the system on the V2 chart (x=z1/z2^%d,y=-1/z2^%d).\n", p, q );
            openfile( result_file, terminal );
            writef( "    z1' = %a\n    z2' = %a\n", f_V2[1], f_V2[2] );
            openfile( terminal );
            t1 := eval( diff(f_V2[1],z1),{z1=0,z2=0} );
            t2 := eval( diff(f_V2[1],z2),{z1=0,z2=0} );
            t3 := eval( diff(f_V2[2],z2),{z1=0,z2=0} );
            type_inf( f_V2, 4, 0, t1, t2, t3, 0 );
        else
            openfile( log_file );
            writef( "0\n" );
            openfile( terminal );
            writef( "In the V2 chart, no extra singularity is found.\n" );
        fi;
    fi;
end:
find_inf_roots := proc( d, f, f_U1, f_U2, x, y, sdegree )
    local p_d, q_d, p, q, g, ge, gn, tot, j, t1, t2, t3, h;
    global rounded;
    p_d := nterm( f[1], x, y, d );
    q_d := nterm( f[2], x, y, d );
    p := nterm( f[1], x, y, d-1 );
    q := nterm( f[2], x, y, d-1 );
    # ROOTS IN THE U1 CHART
    h := subs(x=1, q_d) - y*subs(x=1, p_d);
    g := find_real_roots1(h,y);
    ge := g[1]; gn := g[2];
    openfile( log_file );
    writef( "%d\n", 2*(nops(ge)+nops(gn)) );  # V1 CHART BY MEANS OF SYMMETRY --> sing. * 2
    openfile( terminal );
    tot := nops(ge)+nops(gn);
    writef( "The differential system on the U1 chart:\n" );
    openfile( result_file );
    writef( "First we study the system on the U1 chart (x=1/z2,y=z1/z2):\n" );
    openfile( result_file, terminal );
    writef( "    z1' = %a\n    z2' = %a\n", f_U1[1], f_U1[2] );
    openfile( terminal );
    if save_all then openfile( result_file ); writef( "We change z1->x, z2->y.\n" ); openfile(terminal); fi;
    for j from 1 to nops(ge) do
        t1 := eval( diff(h,y), y=ge[j] );
        t2 := eval( q-y*p, { x=1,y=ge[j] } );
        t3 := -eval( p_d, { x=1,y=ge[j] } );
        type_inf( f_U1, 1, ge[j], t1, t2, t3, sdegree );
    od;
    rounded := true;
    for j from 1 to nops(gn) do
        t1 := evalf( eval( diff(h,y), y=gn[j] ) );
        t2 := evalf( eval( q-y*p, { x=1,y=gn[j] } ) );
        t3 := evalf( -eval( p_d, { x=1,y=gn[j] } ) );
        type_inf( f_U1, 1, gn[j], t1, t2, t3, sdegree );
    od;
    rounded := user_numeric;

    # ROOTS IN THE U2 CHART: is (0,0) a singular points?

    h := subs(y=1,p_d)-x*subs(y=1,q_d);
    if reduce_eeq( subs(x=0,h),0) then g:= {0} else g := {} fi;
    openfile( log_file );
    writef( "%d\n", 2*nops(g) );
    openfile( terminal );
    tot := tot + nops(g);
    writef( "The differential system on the U2 chart:\n" );
    openfile( result_file );
    writef( "First we study the system on the U2 chart (x=z1/z2,y=1/z2):\n" );
    openfile( result_file, terminal );
    writef( "    z1' = %a\n    z2' = %a\n", f_U2[1], f_U2[2] );
    openfile( terminal );
    if save_all then openfile( result_file ); writef( "We change z1->x, z2->y.\n" ); openfile(terminal); fi;
    for j from 1 to nops(g) do
        t1 := eval( diff(h,x), x=g[j] );
        t2 := eval( p-x*q, { x=g[j],y=1 } );
        t3 := -eval( q_d, { x=g[j],y=1 } );
        type_inf( f_U2, 2, g[j], t1, t2, t3, sdegree );
    od;

    if tot=0 then
        writef( "No singular points at infinity are found.\n" );
        #behaviour_inf( f, d );
#    else
#        writef( "We have investigated a total of %d singularities at infinity.\n", tot );
    fi;
end:
find_inf_roots_sing := proc( f_U1, f_U2 )
    local g, ge, gn, j; global rounded;

    g := find_real_roots11( [ subs(z2=0,f_U1[1]), subs(z2=0,f_U1[2]) ], z1 );
    openfile( log_file );
    writef( "%d\n", nops(g[1])+nops(g[2]) );
    openfile( terminal );
    writef( "The differential system on the U1 chart:\n    z1' = %a\n    z2' = %a\n", f_U1[1], f_U1[2] );
    openfile( result_file );
    writef( "First we shall study the system on the U1 chart (x=1/z2, y=z1/z2):\n");
    writef( "    z1' = %a\n    z2' = %a\n", f_U1[1], f_U1[2] );
    if save_all then writef( " we change z1->x, z2->y\n" ) fi;
    openfile( terminal );
    ge := g[1]; gn := g[2];
    for j from 1 to nops(ge) do
        sing_type( subs(z1=x,z2=y,f_U1), ge[j], 0, 1 );
    od;
    rounded := true;
    for j from 1 to nops(gn) do
        sing_type( subs(z1=x,z2=y,f_U1), gn[j], 0, 1 );
    od;
    rounded := user_numeric;

    if nops(ge) + nops(gn) = 0 then
        openfile( result_file, terminal );
        writef( "No singular points found in the U1 chart.\n");
        openfile( terminal );
    end if;

    if reduce_eeq( subs(z1=0,z2=0,f_U2[1]), 0 ) and reduce_eeq( subs(z1=0,z2=0,f_U2[2]), 0 ) then
        g := [0] else g := [] fi;

    openfile( log_file );
    writef( "%d\n", nops(g) );
    openfile( terminal );
    writef( "The differential system on the U2 chart:\n    z1' = %a\n    z2' = %a\n", f_U2[1], f_U2[2] );
    openfile( result_file );
    writef( "Now we study the system on the U2 chart (x=z1/z2, y=1/z2):\n");
    writef( "    z1' = %a\n    z2' = %a\n", f_U2[1], f_U2[2] );
    if save_all then writef( " we change z1->x, z2->y\n" ) fi;
    openfile( terminal );

    for j from 1 to nops(g) do
        sing_type( subs(z1=x,z2=y,f_U2), g[j], 0, 2 );
    od;
    if nops(g) = 0 then
        openfile( result_file, terminal );
        writef( "No singular points found in the U2 chart.\n");
        openfile( terminal );
    end if;
end:
saddle_inf := proc( f, chart, x0, L1, b, L2, sdegree )
    local c, ff, g, h, stable, sep, stype;

    c := b/(L2-L1);
    ff := translation( subs({z1=x,z2=y},f),x,y,x0,0);
    g := transformation( ff, c,1,1,0 );
    h := normalization( g );
    h := optimizevf( h, x, y );

    if save_all then openfile( result_file, terminal ) else openfile( terminal ) fi;
    writef( "Moving this saddle point to the origin.\n" );
    writef( "The new vector field is %a.\n", ff );
    writef( "Transform this vector field so that the linear part is diagonal.\n" );
    writef( "The new vector field is %a.\n", g );
    writef( "Make a 1000 normalization.\nSo the new vector field is %a.\n", h );
    openfile( terminal );
    writef( "We calculate the invariant separatrices.\n" );
    if reduce_llt( L2, 0 ) then stable := 1; stype := -1; else stable := 0; stype := 1; fi;
    sep := manifold( h, taylor_level, stable );
    if stable=1 then
        if save_all then openfile( result_file, terminal ) fi;
        writef( "The stable separatrice is %a.\n", [t,sep] );
        writef( "The unstable separatrice is %a.\n", [0,t] );
        openfile( terminal );
    else
        if save_all then openfile( result_file, terminal ) fi;
        writef( "The unstable separatrice is %a.\n", [t,sep] );
        writef( "The stable separatrice is %a.\n", [0,t] );
        openfile( terminal );
    fi;
    write_saddle( x0, 0, c, 1, 1, 0, h, [sep], [stype], chart );
    if user_p=1 and user_q=1 then
        if stable=1 then
            if sdegree <> 0 then stype := 1 fi;
        else
            if sdegree <> 0 then stype := -1 fi;
        fi;
        if chart=1 then
             write_saddle( x0, 0, -c, 1, -1, 0, h, [subs(t=-t,sep)], [stype], 3 )
        else
             write_saddle( x0, 0, -c, 1, -1, 0, h, [subs(t=-t,sep)], [stype], 4 )
        fi
    fi
end:
se_inf := proc( f, chart, x0, L1, b, L2, sdegree )
    local h, c, ff, g, s1, m, am, stype, center_sep, sep, hh, stable;

    c := b/(L2-L1);
    ff := translation( subs({z1=x,z2=y},f), x, y, x0, 0 );
    g := transformation( ff, c,1,1,0 );
    h := normalization( g );
    h := optimizevf( h, x, y );
    openfile( result_file, terminal );
    writef( "The point (%a,%a) is a semi hyperbolic point.\n", x0, 0 );
    if save_all then openfile( result_file, terminal ) else openfile( terminal ) fi;
    writef( "Moving this point to the origin.\n" );
    writef( "The new vector field is %a.\n", ff );
    writef( "Transform this vector field so that the linear part is diagonal.\n" );
    writef( "The new vector field is %a.\n", g );
    writef( "Make a 1000 normalization.\nSo the new vector field is %a.\n", h );
    openfile( terminal );
    writef( "We calculate the invariant separatrices.\n" );
    if reduce_eeq( L1, 0 ) then
        # z2=0 is the center separatrice
        if reduce_llt( L2, 0 ) then stable := 1 else stable := 0 fi;
        sep := manifold(h, taylor_level, stable );
        s1 := subs({z1=x+1,z2=0},f[1]); #################################### CHANGES MADE !! NEED TO MAKE THEM IN REDUCE
        s1 := optimizepolynomial1( s1, x );
        s1 := first_term( s1,x );
        m := degree(s1,x);
        am := sign ( evalf( subs(x=1,s1) ) );
        if type(m,even) then
            if am > 0 then
                if stable=0 then stype := [1,0] else stype := [2,0] fi;
            else
                if stable=0 then stype := [3,0] else stype := [4,0] fi;
            fi
        else
            if am > 0 then
                if stable=0 then stype := [5,0] else stype := [6,0] fi;
            else
                if stable=0 then stype := [7,0] else stype := [8,0] fi;
            fi
        fi;
    else
        #z2=0 is not the center separatrice
        if reduce_llt( L1, 0 ) then stable := 1 else stable := 0 fi;
        center_sep := center_manifold( h, taylor_level, stable );
        sep := subs( x=t, center_sep[1] );
        stype := [center_sep[3],1];
    fi;
    openfile( result_file, terminal );
    if member( stype[1], {1,2,3,4}) then writef( "The point is a saddle-node.\n" ) end if;
    if stype[1] = 5 then writef( "The point is an unstable node.\n" ); end if;
    if stype[1] = 8 then writef( "The point is a  stable node.\n" ); end if;
    if member( stype[1], {6,7}) then writef( "The point is a saddle.\n"); end if;
    openfile( terminal );

    write_semi_elementary( x0, 0, c, 1, 1, 0, h, stype, [sep], chart );
    if user_p=1 and user_q=1 then
        if sdegree=0 then
            stype := [ op( stype[1], [3,4,1,2,5,6,7,8] ), stype[2] ]
        else
            stype := [ op( stype[1], [2,1,4,3,8,7,6,5] ), stype[2] ]
        fi;
        hh := [ eval((-1)^sdegree*h[1]), eval((-1)^sdegree*h[2]) ];
        if chart=1 then
            write_semi_elementary( x0, 0, c, 1, 1, 0, hh, stype, [sep], 3 );
        else
            write_semi_elementary( x0, 0, c, 1, 1, 0, hh, stype, [sep], 4 );
        fi;
    fi;
end:
type_inf := proc( f, chart, x0, L1, b, L2, sdegree )
    local L, lambda_ratio, lambda_ratio_num, lambda_ratio_den;

    if reduce_eeq( L1, 0 ) and reduce_eeq( L2, 0 ) then
        openfile( result_file, terminal );
        writef( "(%a,%a) is nonelementary.\n", x0, 0 );
        openfile( terminal );
        de_inf( f, chart, x0, sdegree );
    else
        if reduce_eeq( L1, 0 ) or reduce_eeq(L2, 0 ) then
            se_inf( f, chart, x0, L1, b, L2, sdegree );
        else
            if reduce_llt( L1*L2, 0 ) then
                openfile( result_file, terminal );
                writef( "(%a,%a) is a saddle.\n", x0, 0 );
                if abs(evalf(L1)) > abs(evalf(L2)) then
                    lambda_ratio := L1/L2;
                else
                    lambda_ratio := L2/L1;
                end if;
                if (not rounded) and (type(L1, integer)) and (type(L2, integer)) then 
                    lambda_ratio_num := numer(lambda_ratio);
                    lambda_ratio_den := denom(lambda_ratio);
                    openfile(terminal);
                    writef( "The ratio between eigenvalues is %a:%a\n", lambda_ratio_den, lambda_ratio_num);
                    openfile( result_file );
                    writef( "The ratio between eigenvalues is %a:%a\n", lambda_ratio_den, lambda_ratio_num);
                    openfile( terminal );
                else
                    lambda_ratio := convert(evalf(lambda_ratio), rational);
                    lambda_ratio := convert(evalf(lambda_ratio), rational);
                    lambda_ratio_num := numer(lambda_ratio);
                    lambda_ratio_den := denom(lambda_ratio);
                    openfile(terminal);
                    writef( "The ratio between eigenvalues is %a:%a (approximation)\n", lambda_ratio_den, lambda_ratio_num );
                    openfile( result_file );
                    writef( "The ratio between eigenvalues is %a:%a (approximation)\n", lambda_ratio_den, lambda_ratio_num );
                    openfile( terminal );
                end if;
                openfile( terminal );
                saddle_inf( f, chart, x0, L1, b, L2, sdegree );
            else
                L := sign(evalf(L2));
                if L>0 then
                     openfile( result_file, terminal );
                     writef( "(%a,%a) is an unstable node.\n", x0, 0 );
                     openfile( terminal );
                else
                     openfile( result_file, terminal );
                     writef( "(%a,%a) is a stable node.\n", x0, 0 );
                     openfile( terminal );
                fi;
                if abs(evalf(L1)) > abs(evalf(L2)) then
                    lambda_ratio := L1/L2;
                else
                    lambda_ratio := L2/L1;
                end if;
                if (not rounded) and (type(L1, integer)) and (type(L2, integer)) then 
                    lambda_ratio_num := numer(lambda_ratio);
                    lambda_ratio_den := denom(lambda_ratio);
                    openfile(terminal);
                    writef( "The ratio between eigenvalues is %a:%a\n", lambda_ratio_den, lambda_ratio_num);
                    openfile( result_file );
                    writef( "The ratio between eigenvalues is %a:%a\n", lambda_ratio_den, lambda_ratio_num);
                    openfile( terminal );
                else
                    lambda_ratio := convert(evalf(lambda_ratio), rational);
                    lambda_ratio := convert(evalf(lambda_ratio), rational);
                    lambda_ratio_num := numer(lambda_ratio);
                    lambda_ratio_den := denom(lambda_ratio);
                    openfile(terminal);
                    writef( "The ratio between eigenvalues is %a:%a (approximation)\n", lambda_ratio_den, lambda_ratio_num );
                    openfile( result_file );
                    writef( "The ratio between eigenvalues is %a:%a (approximation)\n", lambda_ratio_den, lambda_ratio_num );
                    openfile( terminal );
                end if;
                write_node( x0, 0, L, chart );
                if user_p=1 and user_q=1 then
                    if sdegree <> 0 then L := -L fi;
                    if chart=1 then
                        write_node(x0,0,L,3);
                    else
                        write_node(x0,0,L,4);
                    fi;
                fi;
            fi;
        fi;
    fi;
end:
change_stab := proc( sep )
    local j, trajectors, k, a, b, c;
    trajectors := [];
    for j from 1 to nops(sep) do
        a := [];
        b := sep[j];
        for k from 1 to nops(b) do
            if k <> 6 then
                a := [op(a),op(k,b)];
            else
                c := op(k,b);
                if member( c, {1,3,9,10} ) then c:= 2;
                else if member( c, {2,4,11,12}) then c := 1;
                else if member( c, {5,7}) then c := 6;
                else c := 5; fi fi fi;
                a := [op(a),c];
            fi;
        od;
        trajectors := [op(trajectors),a];
    od;
    trajectors;
end:
de_inf := proc( f, chart, x0, sdegree )
    local trajectors;

    writef( "The point (%a,%a) is a nonelementary point.\n", x0, 0 );
    writef( "Blowing up the vector field.\n" );
    trajectors := blowing_up( subs( {z1=x, z2=y}, f ), x0, 0, false );
    write_degenerate( x0, 0, trajectors[1], chart );
    if user_p=1 and user_q=1 then
        writef( "Degree=%d.\n", sdegree );
        if sdegree=0 then
            trajectors := trajectors[2];
        else
            trajectors := change_stab( trajectors[2] );
        fi;
        if chart=1 then
            write_degenerate( x0, 0, trajectors, 3 );
        else
            write_degenerate( x0, 0, trajectors, 4 );
        fi;
    fi;
end:


save( vec_field_diff_chart, show_charts, behaviour_inf, pl_chart, find_inf_roots, find_inf_roots_sing,
      saddle_inf, se_inf, type_inf, de_inf, change_stab,
    "infinity.m" );
